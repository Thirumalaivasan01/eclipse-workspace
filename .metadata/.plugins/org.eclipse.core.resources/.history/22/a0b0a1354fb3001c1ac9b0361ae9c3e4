package exam;

import java.util.HashMap;

public class ex {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 * int pp=8,qq=8,rr=9; pp=pp^rr; if((pp^rr^10)<(7+pp+qq)) pp=12&qq;
		 * System.out.println(pp+qq+rr);
		 */
		/*
		 * int a=8,b=3,c=5; if((c&5)<a && (2&b)<a) { b=(c+c)+a;
		 * 
		 * } System.out.println(a+b+c);
		 */

		int p = 7, q = 2, r = 5;
		for (r = 3; r <= 6; r++) {
			p = p + q;

			if ((7 + p - r) >(r - q))
				break;
			else {
				p = 12 + p;
				q = (p + q) & q;
			}
		}
		System.out.println(p + q);
		
		
		
		
		
		
		
		
		  public static int minReplace(int a[], int n)
		    {
		        int i;
		 
		        HashMap<Integer, Integer> te = new HashMap<>();
		 
		     
		        HashMap<Integer, Integer> to = new HashMap<>();
		 
		        for (i = 0; i < n; i++) {
		 
		          
		            if (i % 2 == 0) {
		 
		            
		                if (te.containsKey(a[i]))
		                    te.put(a[i], te.get(a[i]) + 1);
		                else
		                    te.put(a[i], 1);
		            }
		            else {
		 
		                if (to.containsKey(a[i]))
		                    to.put(a[i], to.get(a[i]) + 1);
		                else
		                    to.put(a[i], 1);
		            }
		        }
		 
		   
		        int me = -1;
		 
		   
		        int mo = -1;
		 
		        
		        int ce = -1;
		 
		       
		        int co = -1;
		 
		        for (Integer It : te.keySet()) {
		            if (te.get(It) > ce) {
		                ce = te.get(It);
		                me = It;
		            }
		        }
		 
		        
		        for (Integer It : to.keySet()) {
		            if (to.get(It) > co) {
		                co = to.get(It);
		                mo = It;
		            }
		        }
		 
		        int res = 0;
		 
		        for (i = 0; i < n; i++) {
		            if (i % 2 == 0) {
		 
		                
		                if (a[i] != me)
		                    res++;
		            }
		            else {
		
		                if (a[i] != mo)
		                    res++;
		            }
		        }
		 
		        return res;
		    }
		
		
		
		
		
		
		
		
		
		
	}

}
