package co.te.mylibrary.dao;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;

import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.te.mylibrary.config.MyConfig;
import com.te.mylibrary.dto.Actor;
import com.te.mylibrary.dto.Director;
import com.te.mylibrary.dto.Movie;
import com.te.mylibrary.dto.MovieCast;
import com.te.mylibrary.dto.MovieRating;

public class MyDao {
	public void getSave(String actorName, String actorGender, String role, String directorName, String mobileNumber,
			String movieTitle, String language, int year, int rating) {
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("pu-sql-01");
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();

		ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MyConfig.class);
		Object actor = applicationContext.getBean("actor");
		Object director = applicationContext.getBean("director");
		MyConfig config = new MyConfig();
		Actor actorObj = config.getActorObj();
		actorObj.setActorName(actorName);
		actorObj.setActorGender(actorGender);
		Director directorObj = config.getDirectorObj();
		directorObj.setDirectorName(directorName);
		directorObj.setDirectorPhone(mobileNumber);
		Movie movieObj = config.getMovieObj();
		movieObj.setMovieTitle(movieTitle);
		movieObj.setMovieYear(year);
		movieObj.setMovieLanguage(language);
		MovieCast movieCastObj = config.getMovieCastObj();
		movieCastObj.setRole(role);
		MovieRating movieRatingObj = config.getMovieRatingObj();
		movieRatingObj.setReviewStars(rating);

		/*
		 * DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();
		 * BeanDefinitionBuilder actorBean =
		 * BeanDefinitionBuilder.rootBeanDefinition(Actor.class)
		 * .addPropertyValue("actorName", actorName).addPropertyValue("actorGender",
		 * actorGender); BeanDefinitionBuilder directorBean =
		 * BeanDefinitionBuilder.rootBeanDefinition(Director.class)
		 * .addPropertyValue("directorName",
		 * directorName).addPropertyValue("directorPhone", mobileNumber);
		 * BeanDefinitionBuilder movieBean =
		 * BeanDefinitionBuilder.rootBeanDefinition(Movie.class)
		 * .addPropertyValue("movieTitle", movieTitle).addPropertyValue("movieLanguage",
		 * language) .addPropertyValue("movieYear", year); BeanDefinitionBuilder
		 * movieCastBean = BeanDefinitionBuilder.rootBeanDefinition(MovieCast.class)
		 * .addPropertyValue("role", role); BeanDefinitionBuilder movieRatingBean =
		 * BeanDefinitionBuilder.rootBeanDefinition(MovieRating.class)
		 * .addPropertyValue("reviewStars", rating);
		 * beanFactory.registerBeanDefinition("actor", actorBean.getBeanDefinition());
		 * beanFactory.registerBeanDefinition("director",
		 * directorBean.getBeanDefinition());
		 * beanFactory.registerBeanDefinition("movie", movieBean.getBeanDefinition());
		 * beanFactory.registerBeanDefinition("movieCast",
		 * movieCastBean.getBeanDefinition());
		 * beanFactory.registerBeanDefinition("movieRating",
		 * movieRatingBean.getBeanDefinition()); Object actor =
		 * beanFactory.getBean(Actor.class); Object director =
		 * beanFactory.getBean(Director.class); Object movie =
		 * beanFactory.getBean(Movie.class); Object movieCast =
		 * beanFactory.getBean(MovieCast.class); Object movieRating =
		 * beanFactory.getBean(MovieRating.class);
		 */
		entityTransaction.begin();
		entityManager.persist(actor);
		entityManager.persist(director);

		entityTransaction.commit();

	}

}
